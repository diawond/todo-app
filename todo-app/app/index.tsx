import React, { useEffect, useState } from 'react';
import { View, Text, TextInput, Button, FlatList, StyleSheet, TouchableOpacity } from 'react-native';
import { databases,ID } from '@/Backend/appwrite';  // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ appwrite client

const databaseId = '68407f8e002e90c20382'; // ID ‡∏Ç‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const collectionId = '68407fb800311d3d1fb9'; // ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô   

export default function App() {
  const [task, setTask] = useState('');         // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå
  const [todos, setTodos] = useState<any[]>([]);     // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ to-do ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const [isEditing, setIsEditing] = useState(false); //Editing task
  const [editingId, setEditingId] = useState<string | null>(null); // ID ‡∏Ç‡∏≠‡∏á task ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç  

  useEffect(() => {
    loadTasks(); // ‡πÇ‡∏´‡∏•‡∏î tasks ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ
  }, []);

  const loadTasks = async () => {
    try {
      // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ to-do ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Appwrite Database
      const res = await databases.listDocuments(databaseId, collectionId);
      setTodos(res.documents);
    } catch (err) {
      // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      console.error('Load error:', err);
    }
  };

  const addTask = async () => {
    if (task.trim() === '') return; // ‡∏ñ‡πâ‡∏≤ input ‡∏ß‡πà‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á document ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Appwrite Database
      const newTask = await databases.createDocument(
        databaseId,
        collectionId,
        ID.unique(),
        { title: task.trim() }
      );
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° task ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ state
      setTodos([...todos, newTask]);
      setTask(''); // ‡∏•‡πâ‡∏≤‡∏á input
    } catch (err) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      console.error('Add error:', err);
    }
  };

  const deleteTask = async (id: string) => {
    try {
      // ‡∏•‡∏ö document ‡πÉ‡∏ô Appwrite Database ‡∏ï‡∏≤‡∏° id
      await databases.deleteDocument(databaseId, collectionId, id);
      // ‡πÄ‡∏≠‡∏≤ task ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å state
      setTodos(todos.filter((t: any) => t.$id !== id));
    } catch (err) {
      // ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      console.error('Delete error:', err);
    }
  };

  const editTask = (id: string) => {
    // ‡∏´‡∏≤ task ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å state
    const todoToEdit = todos.find((todo: any) => todo.$id === id);
    if (todoToEdit) {
      setTask(todoToEdit.title); // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏•‡∏á input
      setIsEditing(true);        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      setEditingId(id);          // ‡πÄ‡∏Å‡πá‡∏ö id ‡∏Ç‡∏≠‡∏á task ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    }
  };

  const saveTask = async () => {
    if (task.trim() === '' || !editingId) return; // ‡∏ñ‡πâ‡∏≤ input ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ id ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    try {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï document ‡πÉ‡∏ô Appwrite Database
      const updated = await databases.updateDocument(databaseId, collectionId, editingId, {
        title: task.trim(),
      });
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï task ‡πÉ‡∏ô state
      setTodos(todos.map((t: any) => (t.$id === editingId ? updated : t)));
      setTask('');           // ‡∏•‡πâ‡∏≤‡∏á input
      setIsEditing(false);   // ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°
      setEditingId(null);    // ‡∏•‡πâ‡∏≤‡∏á id ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    } catch (err) {
      // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      console.error('Save error:', err);
    }
  };

  const cancelEdit = () => {
    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    setTask('');
    setIsEditing(false);
    setEditingId(null);
  };

   return (
    <View style={styles.container}>
      <Text style={styles.heading}>üìù My To-Do List</Text>

      <TextInput
        style={styles.input}
        placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥"
        value={task}
        onChangeText={setTask}
      />

      {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
      {isEditing ? (
        <View style={styles.buttonRow}>
          <TouchableOpacity style={styles.editSaveButton} onPress={saveTask}>
            <Text style={styles.buttonText}>‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.cancelButton} onPress={cancelEdit}>
            <Text style={styles.buttonText}>‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <TouchableOpacity style={styles.addButton} onPress={addTask}>
          <Text style={styles.addButtonText}>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥</Text>
        </TouchableOpacity>
      )}

      {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏µ‡πÄ‡∏ó‡∏≤ */}
      <View style={styles.todoContainer}>
        <FlatList
          data={todos}
          keyExtractor={(item) => item.$id}
          renderItem={({ item }) => (
            <View style={styles.todoRow}>
              <Text style={styles.todoItem}>‚Ä¢ {item.title}</Text>
              <View style={styles.todoActions}>
                <TouchableOpacity style={styles.editButton} onPress={() =>  editTask(item.$id)}>
                  <Text style={styles.buttonText}>‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</Text>
                </TouchableOpacity>
                <TouchableOpacity style={styles.deleteButton} onPress={() => deleteTask(item.$id)}>
                  <Text style={styles.buttonText}>üóë ‡∏•‡∏ö</Text>
                </TouchableOpacity>
              </View>
            </View>
          )}
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    paddingTop: 60,
    backgroundColor: '#fff',
  },
  heading: {
    fontSize: 24,
    marginBottom: 20,
    textAlign: 'center',
    fontWeight: 'bold',
  },
  input: {
    borderWidth: 1,
    borderColor: '#aaa',
    padding: 10,
    marginBottom: 10,
    borderRadius: 5,
  },
  addButton: {
    backgroundColor: '#28a745',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: 10,
  },
  addButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  editSaveButton: {
    backgroundColor: '#007bff',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    flex: 1,
    marginRight: 5,
  },
  cancelButton: {
    backgroundColor: '#6c757d',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    flex: 1,
    marginLeft: 5,
  },
  buttonRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 10,
  },
  todoContainer: {
    backgroundColor: '#f2f2f2',
    padding: 15,
    borderRadius: 10,
    flex: 1,
  },
  todoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  todoItem: {
    fontSize: 18,
    flex: 1,
  },
  todoActions: {
    flexDirection: 'row',
    gap: 6,
  },
  editButton: {
    backgroundColor: '#ffc107',
    paddingVertical: 6,
    paddingHorizontal: 10,
    borderRadius: 6,
    marginRight: 5,
  },
  deleteButton: {
    backgroundColor: '#dc3545',
    paddingVertical: 6,
    paddingHorizontal: 10,
    borderRadius: 6,
  },
  buttonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: 'bold',
  },
});
